--INSERT의 2가지 문법

--테이블 구조를 빠르게 확인하는 방법
DESC DEPARTMENTS;

SELECT * FROM DEPARTMENTS;
--1ST (컬럼을 정확하게 일치시키는 경우는 컬럼명 생략이 가능)
INSERT INTO DEPARTMENTS VALUES(280, '개발자', NULL, 1700);

--DML문은 트랜잭션이 항상 적용됩니다
ROLLBACK;

--2ND (컬럼을 지칭해서 넣는 경우)
INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID) VALUES(280, '개발자', 1700);

--넣어보기
INSERT INTO DEPARTMENTS VALUES(290, '디자이너', NULL, 1700);
INSERT INTO DEPARTMENTS VALUES(300, 'DB관리자', NULL, 1800);
INSERT INTO DEPARTMENTS VALUES(310, '데이터분석가', NULL, 1800);
INSERT INTO DEPARTMENTS VALUES(320, '퍼블리셔', NULL, 1800);
INSERT INTO DEPARTMENTS VALUES(330, '서버관리자', NULL, 1800);
---
--INSERT문에도 서브쿼리가 사용됩니다.
--실습을 위한 가짜테이블 생성
CREATE TABLE EMPS AS (SELECT * FROM EMPLOYEES WHERE 1 = 2); --구조만 복사하는 테이블생성( 데이터X )

SELECT * FROM EMPS;
DESC EMPS;
--1ST
--모든 컬럼을 서브쿼리 절로 넣을때
INSERT INTO EMPS(SELECT * FROM EMPLOYEES WHERE JOB_ID LIKE '%MAN');
--특정 컬럼을 서브쿼리 절로 넣을때
INSERT INTO EMPS(LAST_NAME, EMAIL, HIRE_DATE, JOB_ID)
                (SELECT LAST_NAME, EMAIL, HIRE_DATE, JOB_ID FROM EMPLOYEES WHERE JOB_ID LIKE '%MAN');
--2ND
INSERT INTO EMPS(LAST_NAME, EMAIL, HIRE_DATE, JOB_ID)
VALUES((SELECT LAST_NAME FROM EMPLOYEES WHERE MANAGER_ID IS NULL),
        'TEST01',
        SYSDATE,
        'TEST03'
    );
    
SELECT * FROM EMPS;
------------------------------------------------------------------------
COMMIT;

SELECT * FROM EMPS;
-- 114번 급여를 10% 인상
UPDATE EMPS SET SALARY = SALARY * 1.1 WHERE EMPLOYEE_ID = 114;

-- WHERE절 없이 구문을 실행시키면, 전체 테이블에 적용되기 때문에 항상 WHERE절을 붙여야 합니다.
-- 그래서 항상, SELECT문으로 업데이트할 값을 확인하고, 적용하는 습관
UPDATE EMPS SET SALARY = 0;
ROLLBACK;

-- 여러행 업데이트
UPDATE EMPS SET SALARY = SALARY * 1.1
                ,COMMISSION_PCT = 0.5
                ,MANAGER_ID = 110
WHERE EMPLOYEE_ID = 114;

--UPDATE문의 서브쿼리절
--1ST
--여러컬럼을 한번에 서브쿼리로 업데이트 하는 구문
SELECT * FROM EMPS;

UPDATE EMPS 
SET (MANAGER_ID, JOB_ID, DEPARTMENT_ID)
 = (SELECT MANAGER_ID, JOB_ID, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 201)
WHERE EMPLOYEE_ID = 114;
--각 컬럼을 서브쿼리로 업데이트 하는 구문
UPDATE EMPS
SET MANAGER_ID = (SELECT MANAGER_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 201),
    JOB_ID = (SELECT JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 201)
WHERE EMPLOYEE_ID = 114;
--WHERE절에도 적용이 됩니다.
UPDATE EMPS
SET SALARY = 0
WHERE EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG');

------------------------------------------
--DELETE문
--삭제하기 전에 꼭, SELECT문으로 삭제키워드를 확인하는 습관을 들이자 (꼭 PK값으로 지정하세요)
SELECT * FROM EMPS WHERE EMPLOYEE_ID = 114;

DELETE FROM EMPS WHERE EMPLOYEE_ID = 114;
DELETE FROM EMPS WHERE JOB_ID LIKE '%MAN';
--DELETE서브쿼리절
DELETE FROM EMPS WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPS WHERE EMPLOYEE_ID = 145); --80번 부서

----------------------------------------------------------------------------------
--DELETE문은 반드시 전부 지워지는것은 아닙니다.
--테이블이 연관관계 가지고 있으면, 참조무결성제약에 위배되는 경우, 지워지지 않습니다.
SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;
 
DELETE FROM DEPARTMENTS WHERE DEPARTMENT_ID = 20; --20번 부서는 EMPLOTEE에서 참조되고 있기 때문에 삭제되지 않습니다.